#! /usr/bin/env python3

import os
import sys
import urllib3
import json
import codecs

apiKey = os.environ['QUOTE_API_KEY']
quoteFunction = 'GLOBAL_QUOTE'
baseUrl = 'https://www.alphavantage.co/query?function={}&symbol={}&apikey={}'
defaultSymbol = 'TWLO'

READ_TIMEOUT = 1.5
RETRIES = 1

keyMap = {
  'symbol': '01. symbol',
  'open': '02. open',
  'high': '03. high',
  'low': '04. low',
  'price': '05. price',
  'volume': '06. volume',
  'latestTradingDay': '07. latest trading day',
  'previousClose': '08. previous close',
  'change': '09. change',
  'changePercent': '10. change percent'
}

def query(symbol):
  http = urllib3.PoolManager()
  reader = codecs.getreader('utf-8')

  url = baseUrl.format(quoteFunction, symbol, apiKey)
  r = http.request('GET', url, preload_content=False, timeout=READ_TIMEOUT, retries=RETRIES)
  
  return json.load(reader(r))


def parseData(data):
  parsedData = {}
  
  for key, value in keyMap.items():
    parsedData[key] = data['Global Quote'].get(value)

  return parsedData


def printQuote(data):
  lastPrice = '\033[30;1m{:.2f}\033[0m'.format(float(data['price']))
  change = round(float(data['change']), 2)
  changePercent = round(float(data['changePercent'][:-1]), 2)
  changeMod = '+' if change > 0 else ''
  changeFormat = "\033[32;1m{}{}{}\033[0m" if change >= 0 else "\033[31;1m{}{}{}\033[0m"

  print('{} {} | ↑ {:.2f} | ↓ {:.2f} | {} ({}) | {}'.format(
    data['symbol'],
    lastPrice,
    float(data['high']),
    float(data['low']),
    changeFormat.format(changeMod, change, ''),
    changeFormat.format('', changePercent, '%'),
    data['latestTradingDay']
  ))

def main():
  try:
    symbol = sys.argv[1]
  except IndexError:
    symbol = defaultSymbol
  
  try:
    responseData = query(symbol)
    parsedData = parseData(responseData)
    printQuote(parsedData)
  except (urllib3.exceptions.ReadTimeoutError, urllib3.exceptions.MaxRetryError):
    print('Failed to fetch quote for "{}" in the allotted {} seconds.'.format(symbol, str(READ_TIMEOUT)))
  except Exception as e:
    print(e)

if __name__ == '__main__':
  main()